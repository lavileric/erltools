language asn;

global begin
    {{ #include "asnsymbol.h"}};
    {{ int AllReadyLoaded(PPTREE tree);}};
    {{
               #ifdef OPTIONAL
               #undef OPTIONAL
               #ifndef OPTIONAL_VAR
               static const int OPTIONAL = 1 ;
               #define OPTIONAL_VAR
               #endif
               #endif
               #ifdef FALSE
               #undef FALSE
               #ifndef FALSE_VAR
        static const int FALSE = 0;
               #define FALSE_VAR
               #endif
               #endif
               #ifdef TRUE
               #undef TRUE
               #ifndef TRUE_VAR
               #define TRUE_VAR
        static const int TRUE = 1;
               #endif
               #endif
               #ifdef MIN
               #undef MIN
               #endif
               #ifdef MAX
               #undef MAX
               #endif
    }};
    {{
        #ifdef NULL
        #undef NULL
        #ifndef NULL_VAR
        #define NULL_VAR
        static void * NULL = 0;
        #endif
        #endif
    }}
end;

use "pretty.met";

lexdefine LexInclude;
    skip ' ','\t';
    case
        takel in ['<'] :
            begin
            while not seel in ['>','\r','\n'] do
                storel takel ;
            takel ;
            return !INCLUDE_SYS;
            end
        takel in ['"'] :
            begin
            while not seel in ['"','\r','\n'] do
                storel takel ;
            takel ;
            return !INCLUDE_LOCAL;
            end
    end;
end;

lexdefine Expo;
    skip ' ','\t','\r','\n';
    case
        takel in ['2'] : return !TWO_EXPO
        takel "10" : return !TEN_EXPO
    end;
end;

lexdefine Numb_5;
    skip ' ','\t','\r','\n';
    case
        takel in ['5'] : return !NUMBER_5
    end;
end;

lexdefine Hexa;
    skip ' ','\t','\r','\n';
    
    /* ou faire un forget */
    if seel in ['a'..'z','A'..'Z','1'..'9'] then
        begin
        storel takel ;
        if seel in ['a'..'z','A'..'Z','1'..'9'] then
            begin
            storel takel ;
            return !HEXA_CODE;
            end;
        resetl;
        end;
end;

lexdefine LexComment;
    skip ' ','\t','\r','\n';
    case
        takel in ['-'] :
            
            /* definition of comment */
            case
                takel in ['-'] :
                    begin
                    begin_comment();
                    storel "-";
                    while seel do
                        case
                            takel "--" :
                                begin
                                store_comment_line();
                                return take LexComment;
                                end
                            takel in ['\n'] :
                                begin
                                store_comment_line();
                                return take LexComment;
                                end
                            takel in ['\r'] : 
                            seel :
                                begin
                                storel takel ;
                                end
                        end;
                    end
                default :
                    begin
                    recoverl;
                    end
            end
    end;
end;

lexdefine LexMeta;
    skip ' ','\t','\r','\n';
    case
        takel in ['$'] :
            
            /* definition of metavariables */
            begin
            if not seel in ['('] then
                while seel in ['a'..'z','A'..'Z','0'..'9','_'] do
                    storel takel 
            else
                begin
                {{ int nbPar = 0;}};
                storel takel ;
                while seel do
                    case
                        seel in ['('] :
                            begin
                            {{ nbPar++;}};
                            storel takel ;
                            end
                        seel in ['\n'] :
                            begin
                            
                            /* do not take line feed */
                            return !META;
                            end
                        seel in [')'] :
                            if {{!nbPar }} then
                                begin
                                storel takel ;
                                return !META;
                                end
                            else
                                begin
                                storel takel ;
                                {{ nbPar--;}};
                                end
                        seel : storel takel 
                    end;
                end;
            return !META;
            end
    end;
end;

lexdefine Lex;
    skip ' ','\t','\r','\n';
    recognize_string;
    if takel in ['-'] then
        begin
        if seel in ['-'] then
            begin
            recoverl;
            return take LexComment;
            end
        else
            return !MINUS_SIGN;
        end;
    case
        seel in ['A'..'Z'] :
            /*definition of type or module ident */
            begin
            while seel in ['a'..'z','A'..'Z','0'..'9','-','_'] do
                storel takel ;
            return SortKeyWord(!TYP_IDENT);
            end
        seel in ['a'..'z'] :
            /*definition of ident */
            begin
            while seel in ['a'..'z','A'..'Z','0'..'9','-','_'] do
                storel takel ;
            return SortKeyWord(!IDENT);
            end
        takel in ['"'] :
            
            /* definition of string */
            while seel do
                case
                    takel in ['\r','\n'] :
                        begin
                        return !STRING;
                        end
                    takel in ['"'] :
                        if seel in ['"'] then
                            storel takel 
                        else
                            begin
                            return !STRING;
                            end
                    takel in ['\\'] :
                        begin
                        storel "\\";
                        if not seel in ['\r'] then
                            
                            /* pour eviter un
                              double \r a l'ecriture formatee */
                            storel takel 
                        else
                            takel ;
                        end
                    seel : storel takel 
                end
        takel in ['\''] :
            
            /* definition of character */
            while seel do
                case
                    takel in ['\r','\n'] :
                        begin
                        return !BSTRING;
                        end
                    takel "'" :
                        begin
                        if takel in ['B'] then
                            return !BSTRING
                        else
                            if takel in ['H'] then
                                return !HSTRING
                            else
                                forgetl;
                        end
                    seel : storel takel 
                end
        seel in ['0'..'9'] :
            
            /* definition of number */
            begin
            while seel in ['0'..'9'] do
                storel takel ;
            return !NUMB;
            end
        takel in ['#'] :
            begin
            while seel in [' ','\t'] do
                takel ;
            case
                takel "include" : return !INCLUDE_DIR
            end;
            end
    end;
end;

define main_entry;
    return take program;
end;

define program;
    return take Module;
end;

define ModuleIdentifier;
    declare retTree,val;
    retTree
        = maketree(MODULE_IDENTIFIER,maketree(TYP_IDENT,take !TYP_IDENT)
            ,());
    if val = take ObjectIdentifierValue then
        replacetree(retTree,2,val);
    return retTree;
end;

define Module;
    declare retTree,list,listModule,val;
    while val = take IncludeDir do
        addlist(listModule,val);
    retTree = maketree(MODULE,take ModuleIdentifier,(),());
    if AllReadyLoaded(retTree) then
        retTree = maketree(MODULE,"",(),())
    else
        begin
        take #"DEFINITIONS";
        if val = take TagStyleDefault then
            replacetree(retTree,2,val);
        take "::=";
        take #"BEGIN";
        if val = take Exports then
            begin
            addlist(list,val);
            end;
        if val = take Imports then
            begin
            addlist(list,val);
            end;
        if val = take Insert then
            begin
            addlist(list,val);
            end;
        while not take #"END" do
            begin
            if val = take TypeAssignment or val = take ValueAssignment then
                addlist(list,val)
            else
                break;
            if take ";" then
                ;
            end;
        replacetree(retTree,3,list);
        end;
    addlist(listModule,retTree);
    return maketree(LIST_MODULE,listModule);
end;

define TagStyleDefault;
    declare retTree;
    case
        take #"EXPLICIT" :
            begin
            retTree = maketree(TAGSTYLE_DEFAULT,"EXPLICIT");
            take #"TAGS";
            end
        take #"IMPLICIT" :
            begin
            retTree = maketree(TAGSTYLE_DEFAULT,"IMPLICIT");
            take #"TAGS";
            end
    end;
    return retTree;
end;

define DefinedValue;
    declare retTree;
    case
        see !TYP_IDENT :
            begin
            retTree = maketree(TYP_IDENT,take !TYP_IDENT);
            if take "." then
                retTree = maketree(REF_VALUE,retTree,take DefinedValue);
            end
        see !IDENT :
            begin
            retTree = maketree(IDENT,take !IDENT);
            if take "." then
                retTree = maketree(REF_VALUE,retTree,take DefinedValue);
            end
        see !NUMB :
            begin
            retTree = maketree(NUMB,take !NUMB);
            if take "." then
                retTree = maketree(REF_VALUE,retTree,take DefinedValue);
            end
    end;
    return retTree;
end;

define DefinedType;
    declare retTree;
    retTree = maketree(TYP_IDENT,take !TYP_IDENT);
    if take "." then
        begin
        retTree
            = maketree(REF_TYP,retTree,maketree(TYP_IDENT,take !TYP_IDENT));
        end;
    return retTree;
end;

define ObjectIdentifierValue;
    declare retTree,list;
    take "{";
    repeat
        case
            see !NUMB : addlist(list,maketree(NUMB,take !NUMB))
            see !TYP_IDENT : addlist(list,take DefinedValue)
            see !IDENT :
                begin
                retTree = maketree(IDENT,take !IDENT);
                if take "(" then
                    begin
                    if see !NUMB then
                        retTree
                            = maketree(VAL_DEF,retTree
                                ,maketree(NUMB,take !NUMB))
                    else
                        retTree
                            = maketree(VAL_DEF,retTree,take DefinedValue);
                    take ")";
                    end;
                addlist(list,retTree);
                end
        end;
    until take "}";
    return maketree(OBJECT_IDENTIFIER_VALUE,list);
end;

/**********************/
/* Imports et exports */
/**********************/
define Symbol;
    if see !IDENT or see !TYP_IDENT then
        case
            see !IDENT : return maketree(IDENT,take !IDENT)
            see !TYP_IDENT : return maketree(TYP_IDENT,take !TYP_IDENT)
        end
    else
        break;
end;

define Insert;
    take #"INSERT";
    return maketree(INSERT,take ModuleIdentifier);
end;

define ImportList;
    declare list;
    repeat
        addlist(list,take Symbol);
    until not take ",";
    take #"FROM";
    return maketree(IMPORTS,list,take ModuleIdentifier);
end;

define Imports;
    declare listImport;
    take #"IMPORTS";
    while not take ";" do
        addlist(listImport,take ImportList);
    return maketree(IMPORT_LIST,listImport);
end;

define Exports;
    declare list;
    take #"EXPORTS";
    repeat
        addlist(list,take Symbol);
    until not take ",";
    take ";";
    return maketree(EXPORTS,list);
end;

/************************/
/* Types                */
/************************/
define TagClass;
    declare retTree;
    case
        take #"UNIVERSAL" : retTree = maketree(TAGCLASS,"UNIVERSAL")
        take #"APPLICATION" : retTree = maketree(TAGCLASS,"APPLICATION")
        take #"PRIVATE" : retTree = maketree(TAGCLASS,"PRIVATE")
    end;
    return retTree;
end;

define TagNumber;
    case
        see !NUMB : return maketree(NUMB,take !NUMB)
        default : return take DefinedValue
    end;
end;

define TagStyle;
    case
        take #"IMPLICIT" : return maketree(TAGSTYLE,"IMPLICIT")
        take #"EXPLICIT" : return maketree(TAGSTYLE,"EXPLICIT")
    end;
end;

define Tag;
    declare retTree,valTree;
    take "[";
    if valTree = take TagClass then
        ;
    retTree = maketree(TAG,valTree,take TagNumber,());
    take "]";
    if valTree = take TagStyle then
        replacetree(retTree,3,valTree);
    return retTree;
end;

define SignedNumber;
    declare retTree;
    case
        take !MINUS_SIGN : retTree = maketree(UN_MINUS,take Number)
        default : retTree = take Number
    end;
    return retTree;
end;

define Number;
    return maketree(NUMB,take !NUMB);
end;

define NamedNumber;
    declare retTree,val;
    retTree = maketree(NAMED_NUMBER,maketree(IDENT,take !IDENT),());
    take "(";
    if val = take SignedNumber or val = take DefinedValue then
        begin
        take ")";
        return replacetree(retTree,2,val);
        end
    else
        break;
end;

define NamedBit;
    declare retTree,val;
    retTree = maketree(NAMED_BIT,maketree(IDENT,take !IDENT),());
    take "(";
    if val = take Number or val = take DefinedValue then
        begin
        take ")";
        return replacetree(retTree,2,val);
        end
    else
        break;
end;

define SelectionType;
    declare retTree;
    retTree = maketree(SELECTION_TYPE,maketree(IDENT,take !IDENT),());
    take "<";
    return replacetree(retTree,2,take Type);
end;

define NamedType2;
    declare retValue;
    take !IDENT;
    {{ retValue = ALLOCATE_CLASS(AsnSymbol(lexEl.string()));}};
    retValue = maketree(NAMED_TYPE,maketree(IDENT,retValue),take Type);
    return retValue;
end;

define NamedType;
    declare retTree;
    if retTree = take SelectionType or retTree = take NamedType2 then
        return retTree
    else
        break;
end;

define EnumeratedType;
    declare list;
    take #"ENUMERATED";
    take "{";
    repeat
        addlist(list,take NamedNumber);
    until not take ",";
    take "}";
    return maketree(ENUMERATED,list);
end;

define SequenceType;
    declare list;
    take #"SEQUENCE";
    take "{";
    if not see "}" then
        repeat
            addlist(list,take ElementType);
        until not take ",";
    take "}";
    return maketree(SEQUENCE,list,());
end;

define SetType;
    declare list;
    take #"SET";
    take "{";
    if not see "}" then
        repeat
            addlist(list,take ElementType);
        until not take ",";
    take "}";
    return maketree(SET,list,());
end;

define InnerSubTyping;
    declare retTree,val,val1,list;
    take #"WITH";
    if take #"COMPONENT" then
        return maketree(COMPONENT,take SubTypeSpec)
    else
        begin
        take #"COMPONENTS";
        take "{";
        case
            take "..." :
                begin
                retTree = maketree(COMPONENTS_EXCEPT,());
                take ",";
                end
            default : retTree = maketree(COMPONENTS_ONLY,())
        end;
        repeat
            val = maketree(INNER,maketree(IDENT,take !IDENT),(),());
            if val1 = take SubTypeSpec then
                replacetree(val,2,val1);
            case
                take #"PRESENT" : replacetree(val,3
                    ,maketree(OPTION,"PRESENT"))
                take #"ABSENT" : replacetree(val,3
                    ,maketree(OPTION,"ABSENT"))
                take #"OPTIONAL" : replacetree(val,3
                    ,maketree(OPTION,"OPTIONAL"))
                default : 
            end;
            addlist(list,val);
        until not take ",";
        replacetree(retTree,1,list);
        take "}";
        return retTree;
        end;
end;

define ValueRange;
    declare retTree,sup;
    case
        take #"MIN" : retTree = maketree(MIN_VALUE)
        default : retTree = take Value
    end;
    if take "<" then
        retTree = maketree(GT_THAN,retTree);
    take "..";
    if take "<" then
        begin
        case
            take #"MAX" : sup = maketree(MAX_VALUE)
            default : sup = take Value
        end;
        return maketree(VALUE_RANGE,retTree,maketree(LT_THAN,sup));
        end
    else
        begin
        case
            take #"MAX" : sup = maketree(MAX_VALUE)
            default : sup = take Value
        end;
        return maketree(VALUE_RANGE,retTree,sup);
        end;
end;

define OneSubTypeSpec;
    declare retTree,val;
    case
        take #"INCLUDES" : retTree = maketree(INCLUDES,take Type)
        take #"FROM" : retTree = maketree(FROM,take SubTypeSpec)
        see #"WITH" : retTree = take InnerSubTyping
        see #"SIZE" : retTree = take SizeRange
        default :
            if val = take ValueRange then
                retTree = val
            else
                retTree = take Value
    end;
    return retTree;
end;

define SubTypeSpec;
    declare list;
    take "(";
    repeat
        addlist(list,take OneSubTypeSpec);
    until not take "|";
    take ")";
    return maketree(SUBTYPE_SPEC,list);
end;

define SizeRange;
    take #"SIZE";
    return maketree(SIZE,take SubTypeSpec);
end;

define ParSizeRange;
    declare retTree;
    take "(";
    retTree = take SizeRange;
    take ")";
    return retTree;
end;

define SequenceOfType;
    declare retTree,val;
    take #"SEQUENCE";
    retTree = maketree(SEQUENCE_OF,(),());
    if val = take ParSizeRange then
        replacetree(retTree,1,val);
    take #"OF";
    replacetree(retTree,2,take Type);
    return retTree;
end;

define SetOfType;
    declare retTree,val;
    take #"SET";
    retTree = maketree(SET_OF,(),());
    if val = take ParSizeRange then
        replacetree(retTree,1,val);
    take #"OF";
    replacetree(retTree,2,take Type);
    return retTree;
end;

define IntegerType;
    declare list;
    take #"INTEGER";
    if take "{" then
        begin
        repeat
            addlist(list,take NamedNumber);
        until not take ",";
        take "}";
        end;
    return maketree(INTEGER,list);
end;

define ChoiceType;
    declare list;
    take #"CHOICE";
    take "{";
    repeat
        addlist(list,take NamedType);
    until not take ",";
    take "}";
    return maketree(CHOICE,list,());
end;

define BitStringType;
    declare retTree,list;
    retTree = maketree(BITSTRING,());
    take #"BIT";
    take #"STRING";
    if take "{" then
        begin
        repeat
            addlist(list,take NamedBit);
        until not take ",";
        take "}";
        replacetree(retTree,1,list);
        end;
    return retTree;
end;

define UnNamedType;
    return maketree(NAMED_TYPE,(),take Type);
end;

define ElementType;
    declare retTree;
    if retTree = take NamedType or retTree = take UnNamedType then
        begin
        retTree = maketree(ELEMENT_TYPE,retTree,());
        case
            take #"OPTIONAL" : return replacetree(retTree,2
                ,maketree(OPTIONAL))
            take #"DEFAULT" : return replacetree(retTree,2
                ,maketree(DEFAULT,take Value))
            default : return retTree
        end;
        end
    else
        begin
        take #"COMPONENTS";
        take #"OF";
        return maketree(COMPONENTS_OF,take Type);
        end;
end;

define BuiltinType;
    declare val;
    case
        take #"BOOLEAN" : return maketree(BOOLEAN)
        see #"ENUMERATED" : return take EnumeratedType
        see #"INTEGER" : return take IntegerType
        take #"REAL" : return maketree(REAL_TYPE)
        see #"BIT" : return take BitStringType
        take #"OCTET" :
            begin
            take #"STRING";
            return maketree(OCTET_STRING);
            end
        take #"NULL" : return maketree(NULL_TYPE)
        take #"OBJECT" :
            begin
            take #"IDENTIFIER";
            return maketree(OBJECT_IDENTIFIER);
            end
        see #"SEQUENCE" :
            begin
            if val = take SequenceType then
                return val
            else
                return take SequenceOfType;
            end
        see #"SET" :
            begin
            if val = take SetType then
                return val
            else
                return take SetOfType;
            end
        see #"CHOICE" : return take ChoiceType
        see !IDENT : return take SelectionType
        see #"ANY" : return take AnyType
        default :
            if val = take UsefulType then
                return val
            else
                return take CharacterStringType
    end;
end;

define TypeAssignment;
    declare retTree;
    retTree = maketree(TYP_ASSIGN,maketree(TYP_IDENT,take !TYP_IDENT),());
    take "::=";
    return replacetree(retTree,2,take Type);
end;

define ValueAssignment;
    declare retTree;
    retTree = maketree(VAL_ASSIGN,take AnIdent,take Type,());
    take "::=";
    return replacetree(retTree,3,take Value);
end;

define AnyType;
    declare retTree;
    take #"ANY";
    retTree = maketree(ANY_TYPE,());
    if take #"DEFINED" then
        begin
        take #"BY";
        replacetree(retTree,1,maketree(IDENT,take !IDENT));
        end;
    return retTree;
end;

define CharacterStringType;
    case
        take #"NumericString" : return maketree(CHARACTER,"NumericString")
        take #"PrintableString" : return maketree(CHARACTER
            ,"PrintableString")
        take #"TeletexString" : return maketree(CHARACTER,"TeletexString")
        take #"VideotexString" : return maketree(CHARACTER,"VideotexString")
        take #"VisibleString" : return maketree(CHARACTER,"VisibleString")
        take #"IA5String" : return maketree(CHARACTER,"IA5String")
        take #"BMPString" : return maketree(CHARACTER,"BMPString")
        take #"GraphicString" : return maketree(CHARACTER,"GraphicString")
        take #"GeneralString" : return maketree(CHARACTER,"GeneralString")
        take #"T61String" : return maketree(CHARACTER,"T61String")
        take #"ISO646String" : return maketree(CHARACTER,"ISO646String")
    end;
end;

define UsefulType;
    case
        take #"GeneralizedTime" : return maketree(GENERALIZED_TIME)
        take #"UTCTime" : return maketree(UTC_TIME)
        take #"EXTERNAL" : return maketree(EXTERNAL)
        take #"ObjectDescriptor" : return maketree(OBJECT_DESCRIPTOR)
    end;
end;

define BareType;
    declare val;
    if val = take BuiltinType then
        return val
    else
        return take DefinedType;
end;

define Type;
    declare retTree,list,val;
    while val = take Tag do
        addlist(list,val);
    retTree = maketree(TYP,list,(),());
    replacetree(retTree,2,take BareType);
    {{ list = 0 ; }};
    while val = take SubTypeSpec do
        addlist(list,val);
    return replacetree(retTree,3,list);
end;

/*********************/
/* values            */
/*********************/
define RealValue;
    declare retTree;
    case
        take #"PLUS-INFINITY" : return maketree(REAL
            ,maketree(MAX_INFIN_VALUE),(),())
        take #"MINUS-INFINITY" : return maketree(REAL
            ,maketree(MIN_INFIN_VALUE),(),())
        take "{" :
            begin
            retTree = maketree(REAL,take SignedNumber,(),());
            take ",";
            case
                take !TWO_EXPO : replacetree(retTree,2,"2")
                take !TEN_EXPO : replacetree(retTree,2,"10")
            end;
            replacetree(retTree,3,take SignedNumber);
            take "}";
            return retTree;
            end
    end;
end;

define BitStringValue;
    case
        see !BSTRING : return maketree(BSTRING,take !BSTRING)
        see !HSTRING : return maketree(HSTRING,take !HSTRING)
    end;
end;

define SequenceValue;
    declare list;
    take "{";
    if not take "}" then
        repeat
            addlist(list,take NamedValueForSequence);
        until take "}";
    return maketree(SEQUENCE_VALUE,list);
end;

define NamedValue1;
    declare retValue;
    take !IDENT;
    {{ retValue = ALLOCATE_CLASS(AsnSymbol(lexEl.string()));}};
    retValue = maketree(NAMED_VALUE,maketree(IDENT,retValue),take Value);
    return retValue;
end;

define NamedValue;
    declare retTree;
    if not retTree = take NamedValue1 then
        retTree = take Value;
    return retTree;
end;

define NamedValueForSequence;
    declare retTree;
    retTree = take NamedValue;
    if not see "}" then
        take ",";
    return retTree;
end;

define AnyValue;
    return maketree(ANY_VALUE,take Type,take Value);
end;

define OtherValue;
    break;
end;

define Value;
    declare val;
    if not (val = take BuiltinValue
                or val = take DefinedValue
                or val = take OtherValue) then
        break
    else
        begin
        if not in context keepCarr then
            if take ";" then
            ;
        return val;
        end;
end;

define BuiltinValue;
    declare val;
    if val = take NamedValue1 then
        return val;
    case
        take #"TRUE" : return maketree(TRUE)
        take #"FALSE" : return maketree(FALSE)
        take #"MIN" : return maketree(IDENT,"MIN")
        take #"MAX" : return maketree(IDENT,"MAX")
        see !IDENT : return maketree(IDENT,take !IDENT)
        take #"NULL" :
            if take #"NULL" then
                return maketree(ANY_VALUE,maketree(NULL_TYPE)
                    ,maketree(NULL_VALUE))
            else
                return maketree(NULL_VALUE)
        see !STRING : return maketree(STRING,take !STRING)
        default :
            if val = take SignedNumber
                or val = take RealValue
                or val = take BitStringValue
                or val = take SequenceValue
                or val = take ObjectIdentifierValue
                or val = take AnyValue then
                return val
            else
                break
    end;
end;

define IncludeDir;
    take !INCLUDE_DIR;
    case
        see !INCLUDE_SYS :
            begin
            {{ ReadInclude(lexEl.string(),0);}};
            return maketree(INCLUDE_DIR,take !INCLUDE_SYS);
            end
        see !INCLUDE_LOCAL :
            begin
            {{ ReadInclude(lexEl.string(),1);}};
            return maketree(INCLUDE_DIR
                ,maketree(STRING,take !INCLUDE_LOCAL));
            end
    end;
end;

define AnIdent;
    return maketree(IDENT,take !IDENT);
end;

define bidon;
    declare retTree;
    with context keepCarr do
        retTree = maketree(CONS,(),());
    retTree = maketree(PACKET,(),());
    retTree = maketree(PACKET_CONTINUED,(),());
    retTree = maketree(CODING,(),(),(),());
    retTree = maketree(BLIND_CODING,(),(),(),());
    retTree = maketree(CODING_SPEC,(),(),());
    retTree = maketree(CODING_W_LENGTH,(),(),(),());
    retTree = maketree(GENEPX,());
    retTree = maketree(INVALID,(),(),(),());
    retTree = maketree(FILEOP,(),());
    retTree = maketree(TAGGED_NAMED_TYPE,(),(),());
    retTree = maketree(INCORRECT_TAG);
    retTree = maketree(INCORRECT_LENGTH);
    retTree = maketree(UNEXPECTED_TAG);
    retTree = maketree(INVALID_FIELD);
    retTree = maketree(UNKNOWN_FIELD);
    retTree = maketree(ANY_TAG);
    retTree = maketree(VAL_ASSIGN_PROG,(),(),());
    retTree = maketree(TOP_ENTRY);
    retTree = maketree(OBJECT_NODE,(),(),());
    retTree = maketree(TLV_CHUNK);
    retTree = maketree(ASN_SYMBOL);
    retTree = maketree(NAMED_VALUE_EXTENDED,(),(),());
    
    /* valeur sons name */
    take !IDENT;
    take !STRING;
    take !NUMB;
    take !CHARACTER;
    return retTree;
end;

define parse_entry;
    declare retTree;
    if not retTree = take Type and not retTree = take Value then
        break;
    return retTree;
end.

