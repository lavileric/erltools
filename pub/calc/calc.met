language calc;

lexdefine LexComment;
    skip ' ','\t','\r','\n';
    
    /* ou faire un forget */
    case
        takel in ['/'] :
            
            /* definition of comment */
            case
                seel in ['/'] :
                    begin
                    begin_comment();
                    storel takel ;
                    while seel do
                        case
                            seel in ['\r','\n'] :
                                begin
                                store_comment_line();
                                return take LexComment;
                                end
                            default :
                                begin
                                storel takel ;
                                end
                        end;
                    end
                takel in ['*'] :
                    begin
                    {{ {int level = 0; }};
                    begin_comment();
                    while seel do
                        case
                            takel "/*" :
                                begin
                                {{ level ++; }};
                                storel "/*";
                                end
                            takel "*/" :
                                begin
                                if {{!level }} then
                                    begin
                                    store_comment_line();
                                    return take LexComment;
                                    end
                                else
                                    begin
                                    {{ level --;}};
                                    storel "*/";
                                    end;
                                end
                            takel in ['\n'] : store_comment_line()
                            takel in ['\r'] : 
                            default :
                                begin
                                storel takel ;
                                end
                        end;
                    {{} }};
                    end
                default :
                    begin
                    recoverl;
                    end
            end
    end;
end;

lexdefine LexMeta;
    skip ' ','\t','\r','\n';
    
    /* ou faire un forget */
    case
        takel in ['$'] :
            
            /* definition of metavariables */
            begin
            if not seel in ['('] then
                while seel in ['a'..'z','A'..'Z','0'..'9','_'] do
                    storel takel 
            else
                begin
                {{ int nbPar = 0;}};
                storel takel ;
                while seel do
                    case
                        seel in ['('] :
                            begin
                            {{ nbPar++;}};
                            storel takel ;
                            end
                        seel in ['\n'] :
                            begin
                            
                            /* do not take line feed */
                            return !META;
                            end
                        seel in [')'] :
                            if {{!nbPar }} then
                                begin
                                storel takel ;
                                return !META;
                                end
                            else
                                begin
                                storel takel ;
                                {{ nbPar--;}};
                                end
                        default : storel takel 
                    end;
                end;
            return !META;
            end
    end;
end;

lexdefine Lex;
    skip ' ','\t','\r','\n';
    
    /* ou faire un forget */
    recognize_string;
    case
        seel in ['a'..'z','A'..'Z'] :
            /*definition of ident */
            begin
            while seel in ['a'..'z','A'..'Z','_','0'..'9'] do
                storel takel ;
            return SortKeyWord(!IDENT);
            end
        takel in ['"'] :
            
            /* definition of string */
            while seel do
                case
                    takel in ['\r','\n'] :
                        begin
                        return !STRING;
                        end
                    takel in ['"'] :
                        if seel in ['"'] then
                            storel takel 
                        else
                            begin
                            return !STRING;
                            end
                    takel in ['\\'] :
                        begin
                        storel "\\";
                        if not seel in ['\r'] then
                            
                            /* pour eviter un
                              double \r a l'ecriture formatee */
                            storel takel 
                        else
                            takel ;
                        end
                    seel : storel takel 
                end
        takel "'" :
            
            /* definition of character */
            while seel do
                case
                    takel "'" :
                        begin
                        return !CHARACTER;
                        end
                    takel in ['\\'] :
                        begin
                        storel "\\";
                        storel takel ;
                        end
                    seel : storel takel 
                end
        seel in ['0'..'9'] :
            
            /* definition of number */
            begin
            while seel in ['0'..'9'] do
                storel takel ;
            return !NUMB;
            end
    end;
end;

lexdefine PrintInstr;
    skip ' ','\t','\r','\n';
    case
        takel "PRINT" :
            begin
            storel "PRINT";
            return !PRINT;
            end
    end;
end;

define program;
    declare list;
    while not take "." do
        begin
        addlist(list,take inst);
        end;
    return maketree(CALC,list);
end;

define printExpr;
    case
        see !STRING : return maketree(STRING,take !STRING)
        default : return take expression
    end;
end;

define inst;
    declare ret,list;
    case
        take !PRINT :
            begin
            repeat
                addlist(list,take printExpr);
            until not take ",";
            return maketree(PRINT,list);
            end
        see !IDENT :
            begin
            ret = maketree(ASS,maketree(IDENT,take !IDENT),());
            take "=";
            return replacetree(ret,2,take expression);
            end
    end;
end;

define expression;
    declare ret;
    ret = take term;
    while see "+" or see "-" do
        case
            take "+" : ret = maketree(PLUS,ret,take term)
            take "-" : ret = maketree(MINUS,ret,take term)
        end;
    return ret;
end;

define term;
    declare ret;
    ret = take factor;
    while see "*" or see "/" do
        case
            take "*" : ret = maketree(MUL,ret,take factor)
            take "/" : ret = maketree(DIV,ret,take factor)
        end;
    return ret;
end;

define factor;
    declare ret;
    case
        see !IDENT : return maketree(IDENT,take !IDENT)
        see !NUMB : return maketree(NUMB,take !NUMB)
        take "(" :
            begin
            ret = maketree(EXP,take expression);
            take ")";
            return ret;
            end
        default : break
    end;
end;

define bidon_bidon;
    take !IDENT;
    take !STRING;
    take !NUMB;
    take !CHARACTER;
end;

define parse_entry;
    {{ goto parse_entry_exit;}};
    take !IDENT;
end.

